/******************************************************************************
 * This TOY program takes an encoded data file as  Stdin and correct the data in
the encoded file.
 * Stdout can also be saved to another output file
 ******************************************************************************/
                                         while(!StdIn.isEmpty())
                                         {
10: 81FF   read R[1]                     int m1 = fromHex(StdIn.readString());
11: 74FF   R[4] <- 00FF                  if(m1=0xFFF)break;
12: 7508   R[5] <- 0008                  
13: 5645   R[6] <- R[4] << R[5]          
14: 1746   R[7] <- R[4] + R[6]           //comparing with FFFF Hex value
15: 2817   R[8] <- R[1] - R[7]                

16: C844   if (R[8] == 0) goto 44        
17: 82FF   read R[2]                     int m2 = fromHex(StdIn.readString());
18: 83FF   read R[3]                     int m3 = fromHex(StdIn.readString());
19: 84FF   read R[4]                     int m4 = fromHex(StdIn.readString());
1A: 85FF   read R[5]                     int p1 = fromHex(StdIn.readString());
1B: 86FF   read R[6]                     int p2 = fromHex(StdIn.readString());
1C: 87FF   read R[7]                     int p3 = fromHex(StdIn.readString());

1D: 7801   R[8] <- 0001                                  
                                         
1E: 4A24   R[A] <- R[2] ^ R[4]           int c1 =p1^m1 ^ m2 ^ m4;
1F: 4AA1   R[A] <- R[A] ^ R[1]           
20: 4AA5   R[A] <- R[A] ^ R[5]           

21: 4B34   R[B] <- R[3] ^ R[4]           int c2 =p2^ m1 ^ m3 ^ m4;
22: 4BB1   R[B] <- R[B] ^ R[1]           
23: 4BB6   R[B] <- R[B] ^ R[6]           

24: 4C34   R[C] <- R[3] ^ R[4]           int c3 =p3^ m2 ^ m3 ^ m4;
25: 4CC2   R[C] <- R[C] ^ R[2]           
26: 4CC7   R[C] <- R[C] ^ R[7]           

27: 7D03   R[D] <- 0003                  
28: 7E02   R[E] <- 0002                  

29: 15AB   R[5] <- R[A] + R[B]           
2A: 155C   R[5] <- R[5] + R[C]           if (c1 + c2 + c3 == 3) 
2B: 255D   R[5] <- R[5] - R[D]           m4 = 1 ^ m4;
2C: C537   if (R[5] == 0) goto 37        

2D: 16AB   R[6] <- R[A] + R[B]           
2E: 266E   R[6] <- R[6] - R[E]           else if (c1 + c2 == 2) 
2F: C639   if (R[6] == 0) goto 39        m1 = 1 ^ m1;

30: 17AC   R[7] <- R[A] + R[C]           
31: 277E   R[7] <- R[7] - R[E]           else if (c1 + c3 == 2)
32: C73B   if (R[7] == 0) goto 3B        m2 = 1 ^ m2;

33: 1FBC   R[F] <- R[B] + R[C]           
34: 2FFE   R[F] <- R[F] - R[E]           else if (c2 + c3 == 2)
35: CF3D   if (R[F] == 0) goto 3D        m3 = 1 ^ m3;

36: C03F   goto 3F                       

37: 4448   R[4] <- R[4] ^ R[8]           
38: C03F   goto 3F                       
39: 4118   R[1] <- R[1] ^ R[8]           
3A: C03F   goto 3F                       
3B: 4228   R[2] <- R[2] ^ R[8]           
3C: C03F   goto 3F                       
3D: 4338   R[3] <- R[3] ^ R[8]           
3E: C03F   goto 3F                       

3F: 91FF   write R[1]                    StdOut.printf(R[1]);
40: 92FF   write R[2]                    StdOut.printf(R[2]); 
41: 93FF   write R[3]                    StdOut.printf(R[3]); 
42: 94FF   write R[4]                    StdOut.printf(R[4]); 

43: C010   goto 10                       }

44: 0000   halt                          